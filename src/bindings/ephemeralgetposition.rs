/**

Generated by the following Solidity interface...
```solidity
interface EphemeralGetPosition {
    struct PositionFull {
        uint96 nonce;
        address operator;
        address token0;
        address token1;
        uint24 fee;
        int24 tickLower;
        int24 tickUpper;
        uint128 liquidity;
        uint256 feeGrowthInside0LastX128;
        uint256 feeGrowthInside1LastX128;
        uint128 tokensOwed0;
        uint128 tokensOwed1;
    }
    struct PositionState {
        uint256 tokenId;
        address owner;
        PositionFull position;
        Slot0 slot0;
        uint128 activeLiquidity;
        uint8 decimals0;
        uint8 decimals1;
    }
    struct Slot0 {
        uint160 sqrtPriceX96;
        int24 tick;
        uint16 observationIndex;
        uint16 observationCardinality;
        uint16 observationCardinalityNext;
        uint32 feeProtocol;
        bool unlocked;
    }

    constructor(address npm, uint256 tokenId) payable;

    function getPosition(address npm, uint256 tokenId) external payable returns (PositionState memory state);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "npm",
        "type": "address",
        "internalType": "contract IUniswapV3NonfungiblePositionManager"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "getPosition",
    "inputs": [
      {
        "name": "npm",
        "type": "address",
        "internalType": "contract IUniswapV3NonfungiblePositionManager"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "state",
        "type": "tuple",
        "internalType": "struct PositionState",
        "components": [
          {
            "name": "tokenId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "owner",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "position",
            "type": "tuple",
            "internalType": "struct PositionFull",
            "components": [
              {
                "name": "nonce",
                "type": "uint96",
                "internalType": "uint96"
              },
              {
                "name": "operator",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "token0",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "token1",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "fee",
                "type": "uint24",
                "internalType": "uint24"
              },
              {
                "name": "tickLower",
                "type": "int24",
                "internalType": "int24"
              },
              {
                "name": "tickUpper",
                "type": "int24",
                "internalType": "int24"
              },
              {
                "name": "liquidity",
                "type": "uint128",
                "internalType": "uint128"
              },
              {
                "name": "feeGrowthInside0LastX128",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "feeGrowthInside1LastX128",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "tokensOwed0",
                "type": "uint128",
                "internalType": "uint128"
              },
              {
                "name": "tokensOwed1",
                "type": "uint128",
                "internalType": "uint128"
              }
            ]
          },
          {
            "name": "slot0",
            "type": "tuple",
            "internalType": "struct Slot0",
            "components": [
              {
                "name": "sqrtPriceX96",
                "type": "uint160",
                "internalType": "uint160"
              },
              {
                "name": "tick",
                "type": "int24",
                "internalType": "int24"
              },
              {
                "name": "observationIndex",
                "type": "uint16",
                "internalType": "uint16"
              },
              {
                "name": "observationCardinality",
                "type": "uint16",
                "internalType": "uint16"
              },
              {
                "name": "observationCardinalityNext",
                "type": "uint16",
                "internalType": "uint16"
              },
              {
                "name": "feeProtocol",
                "type": "uint32",
                "internalType": "uint32"
              },
              {
                "name": "unlocked",
                "type": "bool",
                "internalType": "bool"
              }
            ]
          },
          {
            "name": "activeLiquidity",
            "type": "uint128",
            "internalType": "uint128"
          },
          {
            "name": "decimals0",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "decimals1",
            "type": "uint8",
            "internalType": "uint8"
          }
        ]
      }
    ],
    "stateMutability": "payable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod EphemeralGetPosition {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052604051610913380380610913833981016040819052610022916106cd565b600061002e838361005c565b90506000816040516020016100439190610769565b6040516020818303038152906040529050805160208201fd5b61012b6040805160e0808201835260008083526020808401829052845161018081018652828152908101829052808501829052606081018290526080810182905260a0810182905260c08101829052918201819052610100820181905261012082018190526101408201819052610160820152909182019081526040805160e08101825260008082526020828101829052928201819052606082018190526080820181905260a0820181905260c082015291019081526000602082018190526040820181905260609091015290565b6101358383610167565b6001600160a01b0316602082015260408101516101559084908490610184565b506101618383836101aa565b92915050565b60008061017c846331a9108f60e11b8561036f565b949350505050565b63133f757160e31b600081815260048490529061018083602484885afa95945050505050565b818152604081015160006101bd8561039d565b604080840151606085015160808601519251630b4c774160e11b81526001600160a01b039283166004820152908216602482015262ffffff90921660448301529190911690631698ee8290606401602060405180830381865afa158015610228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024c91906108c8565b90506102606001600160a01b0382166103b8565b6001600160801b03166080840152606083015161027e9082906103cc565b60e08201516001600160801b031615610327576000806102b6838560a001518660c001518860600151602001516103f260201b60201c565b915091506000806102de8660e0015185858961010001518a61012001516104cd60201b60201c565b915091508186610140018181516102f591906108e5565b6001600160801b0316905250610160860180518291906103169083906108e5565b6001600160801b0316905250505050505b604082015161033e906001600160a01b0316610512565b60ff1660a0840152606082015161035d906001600160a01b0316610512565b60ff1660c09093019290925250505050565b600082600052816004526020600060246000875afa610392573d6000803e3d6000fd5b505060005192915050565b6000806103b18363c45a015560e01b610538565b9392505050565b6000806103b183630d34328160e11b610538565b633850c7bd60e01b600081815260e0908390600490865afa6103ed57600080fd5b505050565b600080806104096001600160a01b0388168761055c565b905060006104206001600160a01b0389168761055c565b90508660020b8560020b121561044f5780604001518260400151039350806060015182606001510392506104c2565b8560020b8560020b1261047b5781604001518160400151039350816060015181606001510392506104c2565b604080820151908301516104976001600160a01b038b166105c1565b03039350806060015182606001516104bd8a6001600160a01b03166105d460201b60201c565b030392505b505094509492505050565b6000806104ea6001600160801b038816858803600160801b6105e7565b91506105066001600160801b038816848703600160801b6105e7565b90509550959350505050565b6012600090815263313ce56760e01b602081815280600481865afa60051b519392505050565b6000816000526020600060046000865afa61055257600080fd5b5050600051919050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152600282900b816105b98563f30dba9360e01b84846101006105f4565b505092915050565b60006101618263f305839960e01b610538565b600061016182634614131960e01b610538565b600061017c848484610615565b8360005282600452808260246000885afa61060e57600080fd5b5050505050565b8282026000198385098181108201900380610646578261063d5763ae47f7026000526004601cfd5b508190046103b1565b80831161065b5763ae47f7026000526004601cfd5b82848609600084810385169485900494848311909303908390038390046001010292030417600260038302811880840282030280840282030280840282030280840282030280840282030280840290910302029392505050565b6001600160a01b03811681146106ca57600080fd5b50565b600080604083850312156106e057600080fd5b82516106eb816106b5565b6020939093015192949293505050565b60018060a01b038151168252602081015160020b602083015261ffff604082015116604083015261ffff606082015116606083015261ffff608082015116608083015260a081015161075560a084018263ffffffff169052565b5060c08101516103ed60c084018215159052565b815181526020808301516001600160a01b03169082015260408083015180516103008401926107a391908501906001600160601b03169052565b60208101516001600160a01b03811660608501525060408101516001600160a01b03811660808501525060608101516001600160a01b03811660a085015250608081015162ffffff811660c08501525060a081015161080760e085018260020b9052565b5060c081015161081d61010085018260020b9052565b5060e08101516001600160801b038116610120850152506101008101516101408401526101208101516101608401526101408101516108686101808501826001600160801b03169052565b5061016001516001600160801b03166101a083015260608301516108906101c08401826106fb565b5060808301516001600160801b03166102a083015260a083015160ff9081166102c084015260c0909301519092166102e09091015290565b6000602082840312156108da57600080fd5b81516103b1816106b5565b6001600160801b03818116838216019081111561016157634e487b7160e01b600052601160045260246000fdfe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`@Qa\t\x138\x03\x80a\t\x13\x839\x81\x01`@\x81\x90Ra\0\"\x91a\x06\xCDV[`\0a\0.\x83\x83a\0\\V[\x90P`\0\x81`@Q` \x01a\0C\x91\x90a\x07iV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x80Q` \x82\x01\xFD[a\x01+`@\x80Q`\xE0\x80\x82\x01\x83R`\0\x80\x83R` \x80\x84\x01\x82\x90R\x84Qa\x01\x80\x81\x01\x86R\x82\x81R\x90\x81\x01\x82\x90R\x80\x85\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R\x91\x82\x01\x81\x90Ra\x01\0\x82\x01\x81\x90Ra\x01 \x82\x01\x81\x90Ra\x01@\x82\x01\x81\x90Ra\x01`\x82\x01R\x90\x91\x82\x01\x90\x81R`@\x80Q`\xE0\x81\x01\x82R`\0\x80\x82R` \x82\x81\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01R\x91\x01\x90\x81R`\0` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x90\x91\x01R\x90V[a\x015\x83\x83a\x01gV[`\x01`\x01`\xA0\x1B\x03\x16` \x82\x01R`@\x81\x01Qa\x01U\x90\x84\x90\x84\x90a\x01\x84V[Pa\x01a\x83\x83\x83a\x01\xAAV[\x92\x91PPV[`\0\x80a\x01|\x84c1\xA9\x10\x8F`\xE1\x1B\x85a\x03oV[\x94\x93PPPPV[c\x13?uq`\xE3\x1B`\0\x81\x81R`\x04\x84\x90R\x90a\x01\x80\x83`$\x84\x88Z\xFA\x95\x94PPPPPV[\x81\x81R`@\x81\x01Q`\0a\x01\xBD\x85a\x03\x9DV[`@\x80\x84\x01Q``\x85\x01Q`\x80\x86\x01Q\x92Qc\x0BLwA`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x04\x82\x01R\x90\x82\x16`$\x82\x01Rb\xFF\xFF\xFF\x90\x92\x16`D\x83\x01R\x91\x90\x91\x16\x90c\x16\x98\xEE\x82\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02(W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02L\x91\x90a\x08\xC8V[\x90Pa\x02``\x01`\x01`\xA0\x1B\x03\x82\x16a\x03\xB8V[`\x01`\x01`\x80\x1B\x03\x16`\x80\x84\x01R``\x83\x01Qa\x02~\x90\x82\x90a\x03\xCCV[`\xE0\x82\x01Q`\x01`\x01`\x80\x1B\x03\x16\x15a\x03'W`\0\x80a\x02\xB6\x83\x85`\xA0\x01Q\x86`\xC0\x01Q\x88``\x01Q` \x01Qa\x03\xF2` \x1B` \x1CV[\x91P\x91P`\0\x80a\x02\xDE\x86`\xE0\x01Q\x85\x85\x89a\x01\0\x01Q\x8Aa\x01 \x01Qa\x04\xCD` \x1B` \x1CV[\x91P\x91P\x81\x86a\x01@\x01\x81\x81Qa\x02\xF5\x91\x90a\x08\xE5V[`\x01`\x01`\x80\x1B\x03\x16\x90RPa\x01`\x86\x01\x80Q\x82\x91\x90a\x03\x16\x90\x83\x90a\x08\xE5V[`\x01`\x01`\x80\x1B\x03\x16\x90RPPPPP[`@\x82\x01Qa\x03>\x90`\x01`\x01`\xA0\x1B\x03\x16a\x05\x12V[`\xFF\x16`\xA0\x84\x01R``\x82\x01Qa\x03]\x90`\x01`\x01`\xA0\x1B\x03\x16a\x05\x12V[`\xFF\x16`\xC0\x90\x93\x01\x92\x90\x92RPPPPV[`\0\x82`\0R\x81`\x04R` `\0`$`\0\x87Z\xFAa\x03\x92W=`\0\x80>=`\0\xFD[PP`\0Q\x92\x91PPV[`\0\x80a\x03\xB1\x83c\xC4Z\x01U`\xE0\x1Ba\x058V[\x93\x92PPPV[`\0\x80a\x03\xB1\x83c\r42\x81`\xE1\x1Ba\x058V[c8P\xC7\xBD`\xE0\x1B`\0\x81\x81R`\xE0\x90\x83\x90`\x04\x90\x86Z\xFAa\x03\xEDW`\0\x80\xFD[PPPV[`\0\x80\x80a\x04\t`\x01`\x01`\xA0\x1B\x03\x88\x16\x87a\x05\\V[\x90P`\0a\x04 `\x01`\x01`\xA0\x1B\x03\x89\x16\x87a\x05\\V[\x90P\x86`\x02\x0B\x85`\x02\x0B\x12\x15a\x04OW\x80`@\x01Q\x82`@\x01Q\x03\x93P\x80``\x01Q\x82``\x01Q\x03\x92Pa\x04\xC2V[\x85`\x02\x0B\x85`\x02\x0B\x12a\x04{W\x81`@\x01Q\x81`@\x01Q\x03\x93P\x81``\x01Q\x81``\x01Q\x03\x92Pa\x04\xC2V[`@\x80\x82\x01Q\x90\x83\x01Qa\x04\x97`\x01`\x01`\xA0\x1B\x03\x8B\x16a\x05\xC1V[\x03\x03\x93P\x80``\x01Q\x82``\x01Qa\x04\xBD\x8A`\x01`\x01`\xA0\x1B\x03\x16a\x05\xD4` \x1B` \x1CV[\x03\x03\x92P[PP\x94P\x94\x92PPPV[`\0\x80a\x04\xEA`\x01`\x01`\x80\x1B\x03\x88\x16\x85\x88\x03`\x01`\x80\x1Ba\x05\xE7V[\x91Pa\x05\x06`\x01`\x01`\x80\x1B\x03\x88\x16\x84\x87\x03`\x01`\x80\x1Ba\x05\xE7V[\x90P\x95P\x95\x93PPPPV[`\x12`\0\x90\x81Rc1<\xE5g`\xE0\x1B` \x81\x81R\x80`\x04\x81\x86Z\xFA`\x05\x1BQ\x93\x92PPPV[`\0\x81`\0R` `\0`\x04`\0\x86Z\xFAa\x05RW`\0\x80\xFD[PP`\0Q\x91\x90PV[`@\x80Qa\x01\0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R`\x02\x82\x90\x0B\x81a\x05\xB9\x85c\xF3\r\xBA\x93`\xE0\x1B\x84\x84a\x01\0a\x05\xF4V[PP\x92\x91PPV[`\0a\x01a\x82c\xF3\x05\x83\x99`\xE0\x1Ba\x058V[`\0a\x01a\x82cF\x14\x13\x19`\xE0\x1Ba\x058V[`\0a\x01|\x84\x84\x84a\x06\x15V[\x83`\0R\x82`\x04R\x80\x82`$`\0\x88Z\xFAa\x06\x0EW`\0\x80\xFD[PPPPPV[\x82\x82\x02`\0\x19\x83\x85\t\x81\x81\x10\x82\x01\x90\x03\x80a\x06FW\x82a\x06=Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[P\x81\x90\x04a\x03\xB1V[\x80\x83\x11a\x06[Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x82\x84\x86\t`\0\x84\x81\x03\x85\x16\x94\x85\x90\x04\x94\x84\x83\x11\x90\x93\x03\x90\x83\x90\x03\x83\x90\x04`\x01\x01\x02\x92\x03\x04\x17`\x02`\x03\x83\x02\x81\x18\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x90\x91\x03\x02\x02\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x06\xCAW`\0\x80\xFD[PV[`\0\x80`@\x83\x85\x03\x12\x15a\x06\xE0W`\0\x80\xFD[\x82Qa\x06\xEB\x81a\x06\xB5V[` \x93\x90\x93\x01Q\x92\x94\x92\x93PPPV[`\x01\x80`\xA0\x1B\x03\x81Q\x16\x82R` \x81\x01Q`\x02\x0B` \x83\x01Ra\xFF\xFF`@\x82\x01Q\x16`@\x83\x01Ra\xFF\xFF``\x82\x01Q\x16``\x83\x01Ra\xFF\xFF`\x80\x82\x01Q\x16`\x80\x83\x01R`\xA0\x81\x01Qa\x07U`\xA0\x84\x01\x82c\xFF\xFF\xFF\xFF\x16\x90RV[P`\xC0\x81\x01Qa\x03\xED`\xC0\x84\x01\x82\x15\x15\x90RV[\x81Q\x81R` \x80\x83\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x90\x82\x01R`@\x80\x83\x01Q\x80Qa\x03\0\x84\x01\x92a\x07\xA3\x91\x90\x85\x01\x90`\x01`\x01``\x1B\x03\x16\x90RV[` \x81\x01Q`\x01`\x01`\xA0\x1B\x03\x81\x16``\x85\x01RP`@\x81\x01Q`\x01`\x01`\xA0\x1B\x03\x81\x16`\x80\x85\x01RP``\x81\x01Q`\x01`\x01`\xA0\x1B\x03\x81\x16`\xA0\x85\x01RP`\x80\x81\x01Qb\xFF\xFF\xFF\x81\x16`\xC0\x85\x01RP`\xA0\x81\x01Qa\x08\x07`\xE0\x85\x01\x82`\x02\x0B\x90RV[P`\xC0\x81\x01Qa\x08\x1Da\x01\0\x85\x01\x82`\x02\x0B\x90RV[P`\xE0\x81\x01Q`\x01`\x01`\x80\x1B\x03\x81\x16a\x01 \x85\x01RPa\x01\0\x81\x01Qa\x01@\x84\x01Ra\x01 \x81\x01Qa\x01`\x84\x01Ra\x01@\x81\x01Qa\x08ha\x01\x80\x85\x01\x82`\x01`\x01`\x80\x1B\x03\x16\x90RV[Pa\x01`\x01Q`\x01`\x01`\x80\x1B\x03\x16a\x01\xA0\x83\x01R``\x83\x01Qa\x08\x90a\x01\xC0\x84\x01\x82a\x06\xFBV[P`\x80\x83\x01Q`\x01`\x01`\x80\x1B\x03\x16a\x02\xA0\x83\x01R`\xA0\x83\x01Q`\xFF\x90\x81\x16a\x02\xC0\x84\x01R`\xC0\x90\x93\x01Q\x90\x92\x16a\x02\xE0\x90\x91\x01R\x90V[`\0` \x82\x84\x03\x12\x15a\x08\xDAW`\0\x80\xFD[\x81Qa\x03\xB1\x81a\x06\xB5V[`\x01`\x01`\x80\x1B\x03\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x01aWcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061001e5760003560e01c80633adbb5af14610023575b600080fd5b610036610031366004610894565b61004c565b604051610043919061093c565b60405180910390f35b61011b6040805160e0808201835260008083526020808401829052845161018081018652828152908101829052808501829052606081018290526080810182905260a0810182905260c08101829052918201819052610100820181905261012082018190526101408201819052610160820152909182019081526040805160e08101825260008082526020828101829052928201819052606082018190526080820181905260a0820181905260c082015291019081526000602082018190526040820181905260609091015290565b6101258383610164565b73ffffffffffffffffffffffffffffffffffffffff1660208201526040810151610152908490849061019a565b5061015e8383836101d9565b92915050565b600080610192847f6352211e0000000000000000000000000000000000000000000000000000000085610402565b949350505050565b7f99fbab8800000000000000000000000000000000000000000000000000000000600081815260048490529061018083602484885afa95945050505050565b818152604081015160006101ec85610430565b6040808401516060850151608086015192517f1698ee8200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152908216602482015262ffffff90921660448301529190911690631698ee8290606401602060405180830381865afa15801561027d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a19190610af9565b90506102c28173ffffffffffffffffffffffffffffffffffffffff16610464565b6fffffffffffffffffffffffffffffffff16608084015260608301516102e9908290610491565b60e08201516fffffffffffffffffffffffffffffffff16156103a157600080610324838560a001518660c001518860600151602001516104d0565b915091506000806103468660e0015185858961010001518a61012001516105d9565b9150915081866101400181815161035d9190610b16565b6fffffffffffffffffffffffffffffffff1690525061016086018051829190610387908390610b16565b6fffffffffffffffffffffffffffffffff16905250505050505b6103c4826040015173ffffffffffffffffffffffffffffffffffffffff1661064a565b60ff1660a084015260608201516103f09073ffffffffffffffffffffffffffffffffffffffff1661064a565b60ff1660c09093019290925250505050565b600082600052816004526020600060246000875afa610425573d6000803e3d6000fd5b505060005192915050565b60008061045d837fc45a015500000000000000000000000000000000000000000000000000000000610689565b9392505050565b60008061045d837f1a68650200000000000000000000000000000000000000000000000000000000610689565b7f3850c7bd00000000000000000000000000000000000000000000000000000000600081815260e0908390600490865afa6104cb57600080fd5b505050565b600080806104f473ffffffffffffffffffffffffffffffffffffffff8816876106ad565b9050600061051873ffffffffffffffffffffffffffffffffffffffff8916876106ad565b90508660020b8560020b12156105475780604001518260400151039350806060015182606001510392506105ce565b8560020b8560020b126105735781604001518160400151039350816060015181606001510392506105ce565b8060400151826040015161059c8a73ffffffffffffffffffffffffffffffffffffffff1661072b565b03039350806060015182606001516105c98a73ffffffffffffffffffffffffffffffffffffffff16610757565b030392505b505094509492505050565b60008061060c6fffffffffffffffffffffffffffffffff8816858803700100000000000000000000000000000000610783565b915061063e6fffffffffffffffffffffffffffffffff8816848703700100000000000000000000000000000000610783565b90509550959350505050565b601260009081527f313ce56700000000000000000000000000000000000000000000000000000000602081815280600481865afa60051b519392505050565b6000816000526020600060046000865afa6106a357600080fd5b5050600051919050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152600282900b81610723857ff30dba93000000000000000000000000000000000000000000000000000000008484610100610790565b505092915050565b600061015e827ff305839900000000000000000000000000000000000000000000000000000000610689565b600061015e827f4614131900000000000000000000000000000000000000000000000000000000610689565b60006101928484846107b1565b8360005282600452808260246000885afa6107aa57600080fd5b5050505050565b8282027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff838509818110820190038061080057826107f75763ae47f7026000526004601cfd5b5081900461045d565b8083116108155763ae47f7026000526004601cfd5b82848609600084810385169485900494848311909303908390038390046001010292030417600260038302811880840282030280840282030280840282030280840282030280840282030280840290910302029392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461089157600080fd5b50565b600080604083850312156108a757600080fd5b82356108b28161086f565b946020939093013593505050565b73ffffffffffffffffffffffffffffffffffffffff8151168252602081015160020b602083015261ffff604082015116604083015261ffff606082015116606083015261ffff608082015116608083015260a081015161092860a084018263ffffffff169052565b5060c08101516104cb60c084018215159052565b6000610300820190508251825273ffffffffffffffffffffffffffffffffffffffff602084015116602083015260408301516109896040840182516bffffffffffffffffffffffff169052565b602081015173ffffffffffffffffffffffffffffffffffffffff8116606085015250604081015173ffffffffffffffffffffffffffffffffffffffff8116608085015250606081015173ffffffffffffffffffffffffffffffffffffffff811660a085015250608081015162ffffff811660c08501525060a0810151610a1460e085018260020b9052565b5060c0810151610a2a61010085018260020b9052565b5060e08101516fffffffffffffffffffffffffffffffff811661012085015250610100810151610140840152610120810151610160840152610140810151610a876101808501826fffffffffffffffffffffffffffffffff169052565b5061016001516fffffffffffffffffffffffffffffffff166101a08301526060830151610ab86101c08401826108c0565b5060808301516fffffffffffffffffffffffffffffffff166102a083015260a083015160ff9081166102c084015260c0909301519092166102e09091015290565b600060208284031215610b0b57600080fd5b815161045d8161086f565b6fffffffffffffffffffffffffffffffff818116838216019081111561015e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0\x1EW`\x005`\xE0\x1C\x80c:\xDB\xB5\xAF\x14a\0#W[`\0\x80\xFD[a\x006a\x0016`\x04a\x08\x94V[a\0LV[`@Qa\0C\x91\x90a\t<V[`@Q\x80\x91\x03\x90\xF3[a\x01\x1B`@\x80Q`\xE0\x80\x82\x01\x83R`\0\x80\x83R` \x80\x84\x01\x82\x90R\x84Qa\x01\x80\x81\x01\x86R\x82\x81R\x90\x81\x01\x82\x90R\x80\x85\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R\x91\x82\x01\x81\x90Ra\x01\0\x82\x01\x81\x90Ra\x01 \x82\x01\x81\x90Ra\x01@\x82\x01\x81\x90Ra\x01`\x82\x01R\x90\x91\x82\x01\x90\x81R`@\x80Q`\xE0\x81\x01\x82R`\0\x80\x82R` \x82\x81\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01R\x91\x01\x90\x81R`\0` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x90\x91\x01R\x90V[a\x01%\x83\x83a\x01dV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x82\x01R`@\x81\x01Qa\x01R\x90\x84\x90\x84\x90a\x01\x9AV[Pa\x01^\x83\x83\x83a\x01\xD9V[\x92\x91PPV[`\0\x80a\x01\x92\x84\x7FcR!\x1E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85a\x04\x02V[\x94\x93PPPPV[\x7F\x99\xFB\xAB\x88\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x81\x81R`\x04\x84\x90R\x90a\x01\x80\x83`$\x84\x88Z\xFA\x95\x94PPPPPV[\x81\x81R`@\x81\x01Q`\0a\x01\xEC\x85a\x040V[`@\x80\x84\x01Q``\x85\x01Q`\x80\x86\x01Q\x92Q\x7F\x16\x98\xEE\x82\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x83\x16`\x04\x82\x01R\x90\x82\x16`$\x82\x01Rb\xFF\xFF\xFF\x90\x92\x16`D\x83\x01R\x91\x90\x91\x16\x90c\x16\x98\xEE\x82\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02}W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xA1\x91\x90a\n\xF9V[\x90Pa\x02\xC2\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x04dV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x84\x01R``\x83\x01Qa\x02\xE9\x90\x82\x90a\x04\x91V[`\xE0\x82\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x03\xA1W`\0\x80a\x03$\x83\x85`\xA0\x01Q\x86`\xC0\x01Q\x88``\x01Q` \x01Qa\x04\xD0V[\x91P\x91P`\0\x80a\x03F\x86`\xE0\x01Q\x85\x85\x89a\x01\0\x01Q\x8Aa\x01 \x01Qa\x05\xD9V[\x91P\x91P\x81\x86a\x01@\x01\x81\x81Qa\x03]\x91\x90a\x0B\x16V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RPa\x01`\x86\x01\x80Q\x82\x91\x90a\x03\x87\x90\x83\x90a\x0B\x16V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RPPPPP[a\x03\xC4\x82`@\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x06JV[`\xFF\x16`\xA0\x84\x01R``\x82\x01Qa\x03\xF0\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x06JV[`\xFF\x16`\xC0\x90\x93\x01\x92\x90\x92RPPPPV[`\0\x82`\0R\x81`\x04R` `\0`$`\0\x87Z\xFAa\x04%W=`\0\x80>=`\0\xFD[PP`\0Q\x92\x91PPV[`\0\x80a\x04]\x83\x7F\xC4Z\x01U\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06\x89V[\x93\x92PPPV[`\0\x80a\x04]\x83\x7F\x1Ahe\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06\x89V[\x7F8P\xC7\xBD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x81\x81R`\xE0\x90\x83\x90`\x04\x90\x86Z\xFAa\x04\xCBW`\0\x80\xFD[PPPV[`\0\x80\x80a\x04\xF4s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x87a\x06\xADV[\x90P`\0a\x05\x18s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x87a\x06\xADV[\x90P\x86`\x02\x0B\x85`\x02\x0B\x12\x15a\x05GW\x80`@\x01Q\x82`@\x01Q\x03\x93P\x80``\x01Q\x82``\x01Q\x03\x92Pa\x05\xCEV[\x85`\x02\x0B\x85`\x02\x0B\x12a\x05sW\x81`@\x01Q\x81`@\x01Q\x03\x93P\x81``\x01Q\x81``\x01Q\x03\x92Pa\x05\xCEV[\x80`@\x01Q\x82`@\x01Qa\x05\x9C\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07+V[\x03\x03\x93P\x80``\x01Q\x82``\x01Qa\x05\xC9\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07WV[\x03\x03\x92P[PP\x94P\x94\x92PPPV[`\0\x80a\x06\x0Co\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x85\x88\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x07\x83V[\x91Pa\x06>o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x84\x87\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x07\x83V[\x90P\x95P\x95\x93PPPPV[`\x12`\0\x90\x81R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x81\x81R\x80`\x04\x81\x86Z\xFA`\x05\x1BQ\x93\x92PPPV[`\0\x81`\0R` `\0`\x04`\0\x86Z\xFAa\x06\xA3W`\0\x80\xFD[PP`\0Q\x91\x90PV[`@\x80Qa\x01\0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R`\x02\x82\x90\x0B\x81a\x07#\x85\x7F\xF3\r\xBA\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x84a\x01\0a\x07\x90V[PP\x92\x91PPV[`\0a\x01^\x82\x7F\xF3\x05\x83\x99\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06\x89V[`\0a\x01^\x82\x7FF\x14\x13\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06\x89V[`\0a\x01\x92\x84\x84\x84a\x07\xB1V[\x83`\0R\x82`\x04R\x80\x82`$`\0\x88Z\xFAa\x07\xAAW`\0\x80\xFD[PPPPPV[\x82\x82\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x85\t\x81\x81\x10\x82\x01\x90\x03\x80a\x08\0W\x82a\x07\xF7Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[P\x81\x90\x04a\x04]V[\x80\x83\x11a\x08\x15Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x82\x84\x86\t`\0\x84\x81\x03\x85\x16\x94\x85\x90\x04\x94\x84\x83\x11\x90\x93\x03\x90\x83\x90\x03\x83\x90\x04`\x01\x01\x02\x92\x03\x04\x17`\x02`\x03\x83\x02\x81\x18\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x90\x91\x03\x02\x02\x93\x92PPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x08\x91W`\0\x80\xFD[PV[`\0\x80`@\x83\x85\x03\x12\x15a\x08\xA7W`\0\x80\xFD[\x825a\x08\xB2\x81a\x08oV[\x94` \x93\x90\x93\x015\x93PPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81Q\x16\x82R` \x81\x01Q`\x02\x0B` \x83\x01Ra\xFF\xFF`@\x82\x01Q\x16`@\x83\x01Ra\xFF\xFF``\x82\x01Q\x16``\x83\x01Ra\xFF\xFF`\x80\x82\x01Q\x16`\x80\x83\x01R`\xA0\x81\x01Qa\t(`\xA0\x84\x01\x82c\xFF\xFF\xFF\xFF\x16\x90RV[P`\xC0\x81\x01Qa\x04\xCB`\xC0\x84\x01\x82\x15\x15\x90RV[`\0a\x03\0\x82\x01\x90P\x82Q\x82Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x84\x01Q\x16` \x83\x01R`@\x83\x01Qa\t\x89`@\x84\x01\x82Qk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RV[` \x81\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16``\x85\x01RP`@\x81\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16`\x80\x85\x01RP``\x81\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16`\xA0\x85\x01RP`\x80\x81\x01Qb\xFF\xFF\xFF\x81\x16`\xC0\x85\x01RP`\xA0\x81\x01Qa\n\x14`\xE0\x85\x01\x82`\x02\x0B\x90RV[P`\xC0\x81\x01Qa\n*a\x01\0\x85\x01\x82`\x02\x0B\x90RV[P`\xE0\x81\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16a\x01 \x85\x01RPa\x01\0\x81\x01Qa\x01@\x84\x01Ra\x01 \x81\x01Qa\x01`\x84\x01Ra\x01@\x81\x01Qa\n\x87a\x01\x80\x85\x01\x82o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RV[Pa\x01`\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x01\xA0\x83\x01R``\x83\x01Qa\n\xB8a\x01\xC0\x84\x01\x82a\x08\xC0V[P`\x80\x83\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x02\xA0\x83\x01R`\xA0\x83\x01Q`\xFF\x90\x81\x16a\x02\xC0\x84\x01R`\xC0\x90\x93\x01Q\x90\x92\x16a\x02\xE0\x90\x91\x01R\x90V[`\0` \x82\x84\x03\x12\x15a\x0B\x0BW`\0\x80\xFD[\x81Qa\x04]\x81a\x08oV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x01^W\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD",
    );
    /**```solidity
struct PositionFull { uint96 nonce; address operator; address token0; address token1; uint24 fee; int24 tickLower; int24 tickUpper; uint128 liquidity; uint256 feeGrowthInside0LastX128; uint256 feeGrowthInside1LastX128; uint128 tokensOwed0; uint128 tokensOwed1; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PositionFull {
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::primitives::aliases::U96,
        #[allow(missing_docs)]
        pub operator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub token0: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub token1: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub fee: alloy::sol_types::private::primitives::aliases::U24,
        #[allow(missing_docs)]
        pub tickLower: alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub tickUpper: alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub liquidity: u128,
        #[allow(missing_docs)]
        pub feeGrowthInside0LastX128: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub feeGrowthInside1LastX128: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub tokensOwed0: u128,
        #[allow(missing_docs)]
        pub tokensOwed1: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<96>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<24>,
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Uint<128>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<128>,
            alloy::sol_types::sol_data::Uint<128>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U96,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U24,
            alloy::sol_types::private::primitives::aliases::I24,
            alloy::sol_types::private::primitives::aliases::I24,
            u128,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            u128,
            u128,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PositionFull> for UnderlyingRustTuple<'_> {
            fn from(value: PositionFull) -> Self {
                (
                    value.nonce,
                    value.operator,
                    value.token0,
                    value.token1,
                    value.fee,
                    value.tickLower,
                    value.tickUpper,
                    value.liquidity,
                    value.feeGrowthInside0LastX128,
                    value.feeGrowthInside1LastX128,
                    value.tokensOwed0,
                    value.tokensOwed1,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PositionFull {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    nonce: tuple.0,
                    operator: tuple.1,
                    token0: tuple.2,
                    token1: tuple.3,
                    fee: tuple.4,
                    tickLower: tuple.5,
                    tickUpper: tuple.6,
                    liquidity: tuple.7,
                    feeGrowthInside0LastX128: tuple.8,
                    feeGrowthInside1LastX128: tuple.9,
                    tokensOwed0: tuple.10,
                    tokensOwed1: tuple.11,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for PositionFull {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for PositionFull {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        96,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token1,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.fee),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickLower),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickUpper),
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::tokenize(&self.liquidity),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.feeGrowthInside0LastX128,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.feeGrowthInside1LastX128,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokensOwed0),
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokensOwed1),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for PositionFull {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for PositionFull {
            const NAME: &'static str = "PositionFull";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "PositionFull(uint96 nonce,address operator,address token0,address token1,uint24 fee,int24 tickLower,int24 tickUpper,uint128 liquidity,uint256 feeGrowthInside0LastX128,uint256 feeGrowthInside1LastX128,uint128 tokensOwed0,uint128 tokensOwed1)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        96,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.nonce)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.operator,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.token0,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.token1,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.fee)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickLower)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickUpper)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.liquidity)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.feeGrowthInside0LastX128,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.feeGrowthInside1LastX128,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tokensOwed0)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tokensOwed1)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for PositionFull {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        96,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.nonce)
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.operator,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.token0,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.token1,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.fee)
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickLower,
                    )
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickUpper,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.liquidity,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.feeGrowthInside0LastX128,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.feeGrowthInside1LastX128,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokensOwed0,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokensOwed1,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    96,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.nonce,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.operator,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.token0,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.token1,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.fee, out);
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickLower,
                    out,
                );
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickUpper,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    128,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.liquidity,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.feeGrowthInside0LastX128,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.feeGrowthInside1LastX128,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    128,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokensOwed0,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    128,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokensOwed1,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct PositionState { uint256 tokenId; address owner; PositionFull position; Slot0 slot0; uint128 activeLiquidity; uint8 decimals0; uint8 decimals1; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PositionState {
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub position: <PositionFull as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub slot0: <Slot0 as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub activeLiquidity: u128,
        #[allow(missing_docs)]
        pub decimals0: u8,
        #[allow(missing_docs)]
        pub decimals1: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            PositionFull,
            Slot0,
            alloy::sol_types::sol_data::Uint<128>,
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Uint<8>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            <PositionFull as alloy::sol_types::SolType>::RustType,
            <Slot0 as alloy::sol_types::SolType>::RustType,
            u128,
            u8,
            u8,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PositionState> for UnderlyingRustTuple<'_> {
            fn from(value: PositionState) -> Self {
                (
                    value.tokenId,
                    value.owner,
                    value.position,
                    value.slot0,
                    value.activeLiquidity,
                    value.decimals0,
                    value.decimals1,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PositionState {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    tokenId: tuple.0,
                    owner: tuple.1,
                    position: tuple.2,
                    slot0: tuple.3,
                    activeLiquidity: tuple.4,
                    decimals0: tuple.5,
                    decimals1: tuple.6,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for PositionState {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for PositionState {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <PositionFull as alloy_sol_types::SolType>::tokenize(&self.position),
                    <Slot0 as alloy_sol_types::SolType>::tokenize(&self.slot0),
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::tokenize(&self.activeLiquidity),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.decimals0),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.decimals1),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for PositionState {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for PositionState {
            const NAME: &'static str = "PositionState";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "PositionState(uint256 tokenId,address owner,PositionFull position,Slot0 slot0,uint128 activeLiquidity,uint8 decimals0,uint8 decimals1)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(2);
                components
                    .push(
                        <PositionFull as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <PositionFull as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(<Slot0 as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Slot0 as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tokenId)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.owner,
                        )
                        .0,
                    <PositionFull as alloy_sol_types::SolType>::eip712_data_word(
                            &self.position,
                        )
                        .0,
                    <Slot0 as alloy_sol_types::SolType>::eip712_data_word(&self.slot0).0,
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.activeLiquidity,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.decimals0)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.decimals1)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for PositionState {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenId,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.owner,
                    )
                    + <PositionFull as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.position,
                    )
                    + <Slot0 as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.slot0,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.activeLiquidity,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.decimals0,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.decimals1,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenId,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.owner,
                    out,
                );
                <PositionFull as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.position,
                    out,
                );
                <Slot0 as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.slot0,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    128,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.activeLiquidity,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.decimals0,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.decimals1,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Slot0 { uint160 sqrtPriceX96; int24 tick; uint16 observationIndex; uint16 observationCardinality; uint16 observationCardinalityNext; uint32 feeProtocol; bool unlocked; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Slot0 {
        #[allow(missing_docs)]
        pub sqrtPriceX96: alloy::sol_types::private::primitives::aliases::U160,
        #[allow(missing_docs)]
        pub tick: alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub observationIndex: u16,
        #[allow(missing_docs)]
        pub observationCardinality: u16,
        #[allow(missing_docs)]
        pub observationCardinalityNext: u16,
        #[allow(missing_docs)]
        pub feeProtocol: u32,
        #[allow(missing_docs)]
        pub unlocked: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<160>,
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Uint<16>,
            alloy::sol_types::sol_data::Uint<16>,
            alloy::sol_types::sol_data::Uint<16>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Bool,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U160,
            alloy::sol_types::private::primitives::aliases::I24,
            u16,
            u16,
            u16,
            u32,
            bool,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Slot0> for UnderlyingRustTuple<'_> {
            fn from(value: Slot0) -> Self {
                (
                    value.sqrtPriceX96,
                    value.tick,
                    value.observationIndex,
                    value.observationCardinality,
                    value.observationCardinalityNext,
                    value.feeProtocol,
                    value.unlocked,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Slot0 {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    sqrtPriceX96: tuple.0,
                    tick: tuple.1,
                    observationIndex: tuple.2,
                    observationCardinality: tuple.3,
                    observationCardinalityNext: tuple.4,
                    feeProtocol: tuple.5,
                    unlocked: tuple.6,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Slot0 {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Slot0 {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        160,
                    > as alloy_sol_types::SolType>::tokenize(&self.sqrtPriceX96),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tick),
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.observationIndex),
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.observationCardinality,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.observationCardinalityNext,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeProtocol),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.unlocked,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Slot0 {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Slot0 {
            const NAME: &'static str = "Slot0";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Slot0(uint160 sqrtPriceX96,int24 tick,uint16 observationIndex,uint16 observationCardinality,uint16 observationCardinalityNext,uint32 feeProtocol,bool unlocked)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        160,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.sqrtPriceX96)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tick)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.observationIndex,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.observationCardinality,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.observationCardinalityNext,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.feeProtocol)
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.unlocked,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Slot0 {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        160,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.sqrtPriceX96,
                    )
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.tick)
                    + <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.observationIndex,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.observationCardinality,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.observationCardinalityNext,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.feeProtocol,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.unlocked,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    160,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.sqrtPriceX96,
                    out,
                );
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tick,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    16,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.observationIndex,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    16,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.observationCardinality,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    16,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.observationCardinalityNext,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.feeProtocol,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.unlocked,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address npm, uint256 tokenId) payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub npm: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.npm, value.tokenId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        npm: tuple.0,
                        tokenId: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.npm,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                )
            }
        }
    };
    /**Function with signature `getPosition(address,uint256)` and selector `0x3adbb5af`.
```solidity
function getPosition(address npm, uint256 tokenId) external payable returns (PositionState memory state);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPositionCall {
        #[allow(missing_docs)]
        pub npm: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getPosition(address,uint256)`](getPositionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPositionReturn {
        #[allow(missing_docs)]
        pub state: <PositionState as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPositionCall> for UnderlyingRustTuple<'_> {
                fn from(value: getPositionCall) -> Self {
                    (value.npm, value.tokenId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPositionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        npm: tuple.0,
                        tokenId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (PositionState,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PositionState as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPositionReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getPositionReturn) -> Self {
                    (value.state,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPositionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { state: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPositionCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPositionReturn;
            type ReturnTuple<'a> = (PositionState,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPosition(address,uint256)";
            const SELECTOR: [u8; 4] = [58u8, 219u8, 181u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.npm,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`EphemeralGetPosition`](self) function calls.
    pub enum EphemeralGetPositionCalls {
        #[allow(missing_docs)]
        getPosition(getPositionCall),
    }
    #[automatically_derived]
    impl EphemeralGetPositionCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[58u8, 219u8, 181u8, 175u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for EphemeralGetPositionCalls {
        const NAME: &'static str = "EphemeralGetPositionCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getPosition(_) => {
                    <getPositionCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<EphemeralGetPositionCalls>] = &[
                {
                    fn getPosition(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EphemeralGetPositionCalls> {
                        <getPositionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EphemeralGetPositionCalls::getPosition)
                    }
                    getPosition
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getPosition(inner) => {
                    <getPositionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getPosition(inner) => {
                    <getPositionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`EphemeralGetPosition`](self) contract instance.

See the [wrapper's documentation](`EphemeralGetPositionInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> EphemeralGetPositionInstance<T, P, N> {
        EphemeralGetPositionInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        npm: alloy::sol_types::private::Address,
        tokenId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<EphemeralGetPositionInstance<T, P, N>>,
    > {
        EphemeralGetPositionInstance::<T, P, N>::deploy(provider, npm, tokenId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        npm: alloy::sol_types::private::Address,
        tokenId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        EphemeralGetPositionInstance::<T, P, N>::deploy_builder(provider, npm, tokenId)
    }
    /**A [`EphemeralGetPosition`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`EphemeralGetPosition`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct EphemeralGetPositionInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for EphemeralGetPositionInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("EphemeralGetPositionInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > EphemeralGetPositionInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`EphemeralGetPosition`](self) contract instance.

See the [wrapper's documentation](`EphemeralGetPositionInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            npm: alloy::sol_types::private::Address,
            tokenId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<EphemeralGetPositionInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, npm, tokenId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            npm: alloy::sol_types::private::Address,
            tokenId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { npm, tokenId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> EphemeralGetPositionInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> EphemeralGetPositionInstance<T, P, N> {
            EphemeralGetPositionInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > EphemeralGetPositionInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getPosition`] function.
        pub fn getPosition(
            &self,
            npm: alloy::sol_types::private::Address,
            tokenId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPositionCall, N> {
            self.call_builder(&getPositionCall { npm, tokenId })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > EphemeralGetPositionInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}

/**

Generated by the following Solidity interface...
```solidity
interface PositionLens {
    type V3PoolCallee is address;

    function getFeesOwed(V3PoolCallee pool, address owner, int24 tickLower, int24 tickUpper) external view returns (uint128 tokensOwed0, uint128 tokensOwed1);
    function getTotalAmounts(V3PoolCallee pool, address owner, int24 tickLower, int24 tickUpper) external view returns (uint256 amount0, uint256 amount1);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "getFeesOwed",
    "inputs": [
      {
        "name": "pool",
        "type": "address",
        "internalType": "V3PoolCallee"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tickLower",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "tickUpper",
        "type": "int24",
        "internalType": "int24"
      }
    ],
    "outputs": [
      {
        "name": "tokensOwed0",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "tokensOwed1",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getTotalAmounts",
    "inputs": [
      {
        "name": "pool",
        "type": "address",
        "internalType": "V3PoolCallee"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tickLower",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "tickUpper",
        "type": "int24",
        "internalType": "int24"
      }
    ],
    "outputs": [
      {
        "name": "amount0",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amount1",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod PositionLens {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600f57600080fd5b50610c848061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806395ba51bd1461003b578063c6a6366514610068575b600080fd5b61004e610049366004610bf2565b6100a4565b604080519283526020830191909152015b60405180910390f35b61007b610076366004610bf2565b6101da565b604080516fffffffffffffffffffffffffffffffff93841681529290911660208301520161005f565b60008060006100ff60405180606001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018760020b81526020018660020b8152506040810151600652602081015160035251600052601a600c2090565b9050600061012373ffffffffffffffffffffffffffffffffffffffff8916836102d8565b905060006101468973ffffffffffffffffffffffffffffffffffffffff16610339565b5082519091506fffffffffffffffffffffffffffffffff16156101ce57610186816101738960020b610374565b61017f8960020b610374565b8551610660565b909550935060008061019a8b8b8b8b6101da565b6fffffffffffffffffffffffffffffffff91821693501690506101bd8288610c4a565b96506101c98187610c4a565b955050505b50505094509492505050565b600080600061023560405180606001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018760020b81526020018660020b8152506040810151600652602081015160035251600052601a600c2090565b9050600061025973ffffffffffffffffffffffffffffffffffffffff8916836102d8565b9050600061027c8973ffffffffffffffffffffffffffffffffffffffff16610339565b83519092506fffffffffffffffffffffffffffffffff161590506101ce576000806102a98b8a8a8661070d565b915091506102c68460000151838387602001518860400151610816565b909c909b509950505050505050505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915280610332847f514ea4bf00000000000000000000000000000000000000000000000000000000858460a0610887565b5092915050565b6000808080610368857f3850c7bd000000000000000000000000000000000000000000000000000000006108a8565b90969095509350505050565b60008160ff81901d80820118620d89e88111156103a3576308c379a0600052602080526101546041526045601cfd5b7001fffcb933bd6fad37aa2d162d1a59400160018216027001000000000000000000000000000000001860028216156103ec576ffff97272373d413259a46990580e213a0260801c5b600482161561040b576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561042a576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610449576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610468576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610487576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156104a6576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156104c6576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156104e6576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610506576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610526576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610546576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610566576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610586576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156105a6576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156105c7576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156105e7576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610606576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610623576b048a170391f7dc42444e8fa20260801c5b600085131561064f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff045b63ffffffff0160201c949350505050565b82821083831802928318929091189060008073ffffffffffffffffffffffffffffffffffffffff808616908716116106a45761069d8585856108d4565b9150610704565b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16116106f6576106e28685856108d4565b91506106ef858785610950565b9050610704565b610701858585610950565b90505b94509492505050565b6000808061073173ffffffffffffffffffffffffffffffffffffffff881687610986565b9050600061075573ffffffffffffffffffffffffffffffffffffffff891687610986565b90508660020b8560020b121561078457806040015182604001510393508060600151826060015103925061080b565b8560020b8560020b126107b057816040015181604001510393508160600151816060015103925061080b565b806040015182604001516107d98a73ffffffffffffffffffffffffffffffffffffffff16610a04565b03039350806060015182606001516108068a73ffffffffffffffffffffffffffffffffffffffff16610a36565b030392505b505094509492505050565b6000806108496fffffffffffffffffffffffffffffffff8816858803700100000000000000000000000000000000610a62565b915061087b6fffffffffffffffffffffffffffffffff8816848703700100000000000000000000000000000000610a62565b90509550959350505050565b8360005282600452808260246000885afa6108a157600080fd5b5050505050565b600080826000526040600060046000875afa6108c357600080fd5b600051915060205190509250929050565b60006109468473ffffffffffffffffffffffffffffffffffffffff16610942606060ff16856fffffffffffffffffffffffffffffffff16901b87870373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16610a62565b0490565b90505b9392505050565b6000610946826fffffffffffffffffffffffffffffffff1685850373ffffffffffffffffffffffffffffffffffffffff16610a6f565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152600282900b816109fc857ff30dba93000000000000000000000000000000000000000000000000000000008484610100610887565b505092915050565b6000610a30827ff305839900000000000000000000000000000000000000000000000000000000610ad4565b92915050565b6000610a30827f4614131900000000000000000000000000000000000000000000000000000000610ad4565b6000610946848484610af8565b60008282027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff838509818110820190036c010000000000000000000000008110610ac15763ae47f7026000526004601cfd5b8060a01b8260601c179250505092915050565b6000816000526020600060046000865afa610aee57600080fd5b5050600051919050565b8282027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8385098181108201900380610b475782610b3e5763ae47f7026000526004601cfd5b50819004610949565b808311610b5c5763ae47f7026000526004601cfd5b82848609600084810385169485900494848311909303908390038390046001010292030417600260038302811880840282030280840282030280840282030280840282030280840282030280840290910302029392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610bd857600080fd5b50565b8035600281900b8114610bed57600080fd5b919050565b60008060008060808587031215610c0857600080fd5b8435610c1381610bb6565b93506020850135610c2381610bb6565b9250610c3160408601610bdb565b9150610c3f60608601610bdb565b905092959194509250565b80820180821115610a30577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0FW`\0\x80\xFD[Pa\x0C\x84\x80a\0\x1F`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x006W`\x005`\xE0\x1C\x80c\x95\xBAQ\xBD\x14a\0;W\x80c\xC6\xA66e\x14a\0hW[`\0\x80\xFD[a\0Na\0I6`\x04a\x0B\xF2V[a\0\xA4V[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01[`@Q\x80\x91\x03\x90\xF3[a\0{a\0v6`\x04a\x0B\xF2V[a\x01\xDAV[`@\x80Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x84\x16\x81R\x92\x90\x91\x16` \x83\x01R\x01a\0_V[`\0\x80`\0a\0\xFF`@Q\x80``\x01`@R\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87`\x02\x0B\x81R` \x01\x86`\x02\x0B\x81RP`@\x81\x01Q`\x06R` \x81\x01Q`\x03RQ`\0R`\x1A`\x0C \x90V[\x90P`\0a\x01#s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x83a\x02\xD8V[\x90P`\0a\x01F\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x039V[P\x82Q\x90\x91Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x01\xCEWa\x01\x86\x81a\x01s\x89`\x02\x0Ba\x03tV[a\x01\x7F\x89`\x02\x0Ba\x03tV[\x85Qa\x06`V[\x90\x95P\x93P`\0\x80a\x01\x9A\x8B\x8B\x8B\x8Ba\x01\xDAV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x93P\x16\x90Pa\x01\xBD\x82\x88a\x0CJV[\x96Pa\x01\xC9\x81\x87a\x0CJV[\x95PPP[PPP\x94P\x94\x92PPPV[`\0\x80`\0a\x025`@Q\x80``\x01`@R\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87`\x02\x0B\x81R` \x01\x86`\x02\x0B\x81RP`@\x81\x01Q`\x06R` \x81\x01Q`\x03RQ`\0R`\x1A`\x0C \x90V[\x90P`\0a\x02Ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x83a\x02\xD8V[\x90P`\0a\x02|\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x039V[\x83Q\x90\x92Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15\x90Pa\x01\xCEW`\0\x80a\x02\xA9\x8B\x8A\x8A\x86a\x07\rV[\x91P\x91Pa\x02\xC6\x84`\0\x01Q\x83\x83\x87` \x01Q\x88`@\x01Qa\x08\x16V[\x90\x9C\x90\x9BP\x99PPPPPPPPPPV[`@\x80Q`\xA0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x91\x90\x91R\x80a\x032\x84\x7FQN\xA4\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\x84`\xA0a\x08\x87V[P\x92\x91PPV[`\0\x80\x80\x80a\x03h\x85\x7F8P\xC7\xBD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x08\xA8V[\x90\x96\x90\x95P\x93PPPPV[`\0\x81`\xFF\x81\x90\x1D\x80\x82\x01\x18b\r\x89\xE8\x81\x11\x15a\x03\xA3Wc\x08\xC3y\xA0`\0R` \x80Ra\x01T`AR`E`\x1C\xFD[p\x01\xFF\xFC\xB93\xBDo\xAD7\xAA-\x16-\x1AY@\x01`\x01\x82\x16\x02p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18`\x02\x82\x16\x15a\x03\xECWo\xFF\xF9rr7=A2Y\xA4i\x90X\x0E!:\x02`\x80\x1C[`\x04\x82\x16\x15a\x04\x0BWo\xFF\xF2\xE5\x0F_ei2\xEF\x125|\xF3\xC7\xFD\xCC\x02`\x80\x1C[`\x08\x82\x16\x15a\x04*Wo\xFF\xE5\xCA\xCA~\x10\xE4\xE6\x1C6$\xEA\xA0\x94\x1C\xD0\x02`\x80\x1C[`\x10\x82\x16\x15a\x04IWo\xFF\xCB\x98C\xD6\x0FaY\xC9\xDBX\x83\\\x92fD\x02`\x80\x1C[` \x82\x16\x15a\x04hWo\xFF\x97;A\xFA\x98\xC0\x81G.h\x96\xDF\xB2T\xC0\x02`\x80\x1C[`@\x82\x16\x15a\x04\x87Wo\xFF.\xA1df\xC9j8C\xECx\xB3&\xB5(a\x02`\x80\x1C[`\x80\x82\x16\x15a\x04\xA6Wo\xFE]\xEE\x04j\x99\xA2\xA8\x11\xC4a\xF1\x96\x9C0S\x02`\x80\x1C[a\x01\0\x82\x16\x15a\x04\xC6Wo\xFC\xBE\x86\xC7\x90\n\x88\xAE\xDC\xFF\xC8;G\x9A\xA3\xA4\x02`\x80\x1C[a\x02\0\x82\x16\x15a\x04\xE6Wo\xF9\x87\xA7%:\xC4\x13\x17o+\x07L\xF7\x81^T\x02`\x80\x1C[a\x04\0\x82\x16\x15a\x05\x06Wo\xF39+\x08\"\xB7\0\x05\x94\x0Cz9\x8EKp\xF3\x02`\x80\x1C[a\x08\0\x82\x16\x15a\x05&Wo\xE7\x15\x94u\xA2\xC2\x9BtC\xB2\x9C\x7F\xA6\xE8\x89\xD9\x02`\x80\x1C[a\x10\0\x82\x16\x15a\x05FWo\xD0\x97\xF3\xBD\xFD \"\xB8\x84Z\xD8\xF7\x92\xAAX%\x02`\x80\x1C[a \0\x82\x16\x15a\x05fWo\xA9\xF7FF-\x87\x0F\xDF\x8Ae\xDC\x1F\x90\xE0a\xE5\x02`\x80\x1C[a@\0\x82\x16\x15a\x05\x86Wop\xD8i\xA1V\xD2\xA1\xB8\x90\xBB=\xF6+\xAF2\xF7\x02`\x80\x1C[a\x80\0\x82\x16\x15a\x05\xA6Wo1\xBE\x13_\x97\xD0\x8F\xD9\x81#\x15\x05T/\xCF\xA6\x02`\x80\x1C[b\x01\0\0\x82\x16\x15a\x05\xC7Wo\t\xAAP\x8B[z\x84\xE1\xC6w\xDET\xF3\xE9\x9B\xC9\x02`\x80\x1C[b\x02\0\0\x82\x16\x15a\x05\xE7Wn]j\xF8\xDE\xDB\x81\x19f\x99\xC3)\"^\xE6\x04\x02`\x80\x1C[b\x04\0\0\x82\x16\x15a\x06\x06Wm\"\x16\xE5\x84\xF5\xFA\x1E\xA9&\x04\x1B\xED\xFE\x98\x02`\x80\x1C[b\x08\0\0\x82\x16\x15a\x06#Wk\x04\x8A\x17\x03\x91\xF7\xDCBDN\x8F\xA2\x02`\x80\x1C[`\0\x85\x13\x15a\x06OW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04[c\xFF\xFF\xFF\xFF\x01` \x1C\x94\x93PPPPV[\x82\x82\x10\x83\x83\x18\x02\x92\x83\x18\x92\x90\x91\x18\x90`\0\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x86\x16\x90\x87\x16\x11a\x06\xA4Wa\x06\x9D\x85\x85\x85a\x08\xD4V[\x91Pa\x07\x04V[\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11a\x06\xF6Wa\x06\xE2\x86\x85\x85a\x08\xD4V[\x91Pa\x06\xEF\x85\x87\x85a\tPV[\x90Pa\x07\x04V[a\x07\x01\x85\x85\x85a\tPV[\x90P[\x94P\x94\x92PPPV[`\0\x80\x80a\x071s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x87a\t\x86V[\x90P`\0a\x07Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x87a\t\x86V[\x90P\x86`\x02\x0B\x85`\x02\x0B\x12\x15a\x07\x84W\x80`@\x01Q\x82`@\x01Q\x03\x93P\x80``\x01Q\x82``\x01Q\x03\x92Pa\x08\x0BV[\x85`\x02\x0B\x85`\x02\x0B\x12a\x07\xB0W\x81`@\x01Q\x81`@\x01Q\x03\x93P\x81``\x01Q\x81``\x01Q\x03\x92Pa\x08\x0BV[\x80`@\x01Q\x82`@\x01Qa\x07\xD9\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\n\x04V[\x03\x03\x93P\x80``\x01Q\x82``\x01Qa\x08\x06\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\n6V[\x03\x03\x92P[PP\x94P\x94\x92PPPV[`\0\x80a\x08Io\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x85\x88\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\nbV[\x91Pa\x08{o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x84\x87\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\nbV[\x90P\x95P\x95\x93PPPPV[\x83`\0R\x82`\x04R\x80\x82`$`\0\x88Z\xFAa\x08\xA1W`\0\x80\xFD[PPPPPV[`\0\x80\x82`\0R`@`\0`\x04`\0\x87Z\xFAa\x08\xC3W`\0\x80\xFD[`\0Q\x91P` Q\x90P\x92P\x92\x90PV[`\0a\tF\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\tB```\xFF\x16\x85o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x87\x87\x03s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\nbV[\x04\x90V[\x90P[\x93\x92PPPV[`\0a\tF\x82o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85\x85\x03s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\noV[`@\x80Qa\x01\0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R`\x02\x82\x90\x0B\x81a\t\xFC\x85\x7F\xF3\r\xBA\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x84a\x01\0a\x08\x87V[PP\x92\x91PPV[`\0a\n0\x82\x7F\xF3\x05\x83\x99\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n\xD4V[\x92\x91PPV[`\0a\n0\x82\x7FF\x14\x13\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n\xD4V[`\0a\tF\x84\x84\x84a\n\xF8V[`\0\x82\x82\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x85\t\x81\x81\x10\x82\x01\x90\x03l\x01\0\0\0\0\0\0\0\0\0\0\0\0\x81\x10a\n\xC1Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x80`\xA0\x1B\x82``\x1C\x17\x92PPP\x92\x91PPV[`\0\x81`\0R` `\0`\x04`\0\x86Z\xFAa\n\xEEW`\0\x80\xFD[PP`\0Q\x91\x90PV[\x82\x82\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x85\t\x81\x81\x10\x82\x01\x90\x03\x80a\x0BGW\x82a\x0B>Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[P\x81\x90\x04a\tIV[\x80\x83\x11a\x0B\\Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x82\x84\x86\t`\0\x84\x81\x03\x85\x16\x94\x85\x90\x04\x94\x84\x83\x11\x90\x93\x03\x90\x83\x90\x03\x83\x90\x04`\x01\x01\x02\x92\x03\x04\x17`\x02`\x03\x83\x02\x81\x18\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x90\x91\x03\x02\x02\x93\x92PPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0B\xD8W`\0\x80\xFD[PV[\x805`\x02\x81\x90\x0B\x81\x14a\x0B\xEDW`\0\x80\xFD[\x91\x90PV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x0C\x08W`\0\x80\xFD[\x845a\x0C\x13\x81a\x0B\xB6V[\x93P` \x85\x015a\x0C#\x81a\x0B\xB6V[\x92Pa\x0C1`@\x86\x01a\x0B\xDBV[\x91Pa\x0C?``\x86\x01a\x0B\xDBV[\x90P\x92\x95\x91\x94P\x92PV[\x80\x82\x01\x80\x82\x11\x15a\n0W\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50600436106100365760003560e01c806395ba51bd1461003b578063c6a6366514610068575b600080fd5b61004e610049366004610bf2565b6100a4565b604080519283526020830191909152015b60405180910390f35b61007b610076366004610bf2565b6101da565b604080516fffffffffffffffffffffffffffffffff93841681529290911660208301520161005f565b60008060006100ff60405180606001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018760020b81526020018660020b8152506040810151600652602081015160035251600052601a600c2090565b9050600061012373ffffffffffffffffffffffffffffffffffffffff8916836102d8565b905060006101468973ffffffffffffffffffffffffffffffffffffffff16610339565b5082519091506fffffffffffffffffffffffffffffffff16156101ce57610186816101738960020b610374565b61017f8960020b610374565b8551610660565b909550935060008061019a8b8b8b8b6101da565b6fffffffffffffffffffffffffffffffff91821693501690506101bd8288610c4a565b96506101c98187610c4a565b955050505b50505094509492505050565b600080600061023560405180606001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018760020b81526020018660020b8152506040810151600652602081015160035251600052601a600c2090565b9050600061025973ffffffffffffffffffffffffffffffffffffffff8916836102d8565b9050600061027c8973ffffffffffffffffffffffffffffffffffffffff16610339565b83519092506fffffffffffffffffffffffffffffffff161590506101ce576000806102a98b8a8a8661070d565b915091506102c68460000151838387602001518860400151610816565b909c909b509950505050505050505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915280610332847f514ea4bf00000000000000000000000000000000000000000000000000000000858460a0610887565b5092915050565b6000808080610368857f3850c7bd000000000000000000000000000000000000000000000000000000006108a8565b90969095509350505050565b60008160ff81901d80820118620d89e88111156103a3576308c379a0600052602080526101546041526045601cfd5b7001fffcb933bd6fad37aa2d162d1a59400160018216027001000000000000000000000000000000001860028216156103ec576ffff97272373d413259a46990580e213a0260801c5b600482161561040b576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561042a576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610449576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610468576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610487576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156104a6576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156104c6576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156104e6576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610506576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610526576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610546576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610566576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610586576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156105a6576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156105c7576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156105e7576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610606576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610623576b048a170391f7dc42444e8fa20260801c5b600085131561064f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff045b63ffffffff0160201c949350505050565b82821083831802928318929091189060008073ffffffffffffffffffffffffffffffffffffffff808616908716116106a45761069d8585856108d4565b9150610704565b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16116106f6576106e28685856108d4565b91506106ef858785610950565b9050610704565b610701858585610950565b90505b94509492505050565b6000808061073173ffffffffffffffffffffffffffffffffffffffff881687610986565b9050600061075573ffffffffffffffffffffffffffffffffffffffff891687610986565b90508660020b8560020b121561078457806040015182604001510393508060600151826060015103925061080b565b8560020b8560020b126107b057816040015181604001510393508160600151816060015103925061080b565b806040015182604001516107d98a73ffffffffffffffffffffffffffffffffffffffff16610a04565b03039350806060015182606001516108068a73ffffffffffffffffffffffffffffffffffffffff16610a36565b030392505b505094509492505050565b6000806108496fffffffffffffffffffffffffffffffff8816858803700100000000000000000000000000000000610a62565b915061087b6fffffffffffffffffffffffffffffffff8816848703700100000000000000000000000000000000610a62565b90509550959350505050565b8360005282600452808260246000885afa6108a157600080fd5b5050505050565b600080826000526040600060046000875afa6108c357600080fd5b600051915060205190509250929050565b60006109468473ffffffffffffffffffffffffffffffffffffffff16610942606060ff16856fffffffffffffffffffffffffffffffff16901b87870373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16610a62565b0490565b90505b9392505050565b6000610946826fffffffffffffffffffffffffffffffff1685850373ffffffffffffffffffffffffffffffffffffffff16610a6f565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152600282900b816109fc857ff30dba93000000000000000000000000000000000000000000000000000000008484610100610887565b505092915050565b6000610a30827ff305839900000000000000000000000000000000000000000000000000000000610ad4565b92915050565b6000610a30827f4614131900000000000000000000000000000000000000000000000000000000610ad4565b6000610946848484610af8565b60008282027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff838509818110820190036c010000000000000000000000008110610ac15763ae47f7026000526004601cfd5b8060a01b8260601c179250505092915050565b6000816000526020600060046000865afa610aee57600080fd5b5050600051919050565b8282027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8385098181108201900380610b475782610b3e5763ae47f7026000526004601cfd5b50819004610949565b808311610b5c5763ae47f7026000526004601cfd5b82848609600084810385169485900494848311909303908390038390046001010292030417600260038302811880840282030280840282030280840282030280840282030280840282030280840290910302029392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610bd857600080fd5b50565b8035600281900b8114610bed57600080fd5b919050565b60008060008060808587031215610c0857600080fd5b8435610c1381610bb6565b93506020850135610c2381610bb6565b9250610c3160408601610bdb565b9150610c3f60608601610bdb565b905092959194509250565b80820180821115610a30577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x006W`\x005`\xE0\x1C\x80c\x95\xBAQ\xBD\x14a\0;W\x80c\xC6\xA66e\x14a\0hW[`\0\x80\xFD[a\0Na\0I6`\x04a\x0B\xF2V[a\0\xA4V[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01[`@Q\x80\x91\x03\x90\xF3[a\0{a\0v6`\x04a\x0B\xF2V[a\x01\xDAV[`@\x80Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x84\x16\x81R\x92\x90\x91\x16` \x83\x01R\x01a\0_V[`\0\x80`\0a\0\xFF`@Q\x80``\x01`@R\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87`\x02\x0B\x81R` \x01\x86`\x02\x0B\x81RP`@\x81\x01Q`\x06R` \x81\x01Q`\x03RQ`\0R`\x1A`\x0C \x90V[\x90P`\0a\x01#s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x83a\x02\xD8V[\x90P`\0a\x01F\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x039V[P\x82Q\x90\x91Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x01\xCEWa\x01\x86\x81a\x01s\x89`\x02\x0Ba\x03tV[a\x01\x7F\x89`\x02\x0Ba\x03tV[\x85Qa\x06`V[\x90\x95P\x93P`\0\x80a\x01\x9A\x8B\x8B\x8B\x8Ba\x01\xDAV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x93P\x16\x90Pa\x01\xBD\x82\x88a\x0CJV[\x96Pa\x01\xC9\x81\x87a\x0CJV[\x95PPP[PPP\x94P\x94\x92PPPV[`\0\x80`\0a\x025`@Q\x80``\x01`@R\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87`\x02\x0B\x81R` \x01\x86`\x02\x0B\x81RP`@\x81\x01Q`\x06R` \x81\x01Q`\x03RQ`\0R`\x1A`\x0C \x90V[\x90P`\0a\x02Ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x83a\x02\xD8V[\x90P`\0a\x02|\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x039V[\x83Q\x90\x92Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15\x90Pa\x01\xCEW`\0\x80a\x02\xA9\x8B\x8A\x8A\x86a\x07\rV[\x91P\x91Pa\x02\xC6\x84`\0\x01Q\x83\x83\x87` \x01Q\x88`@\x01Qa\x08\x16V[\x90\x9C\x90\x9BP\x99PPPPPPPPPPV[`@\x80Q`\xA0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x91\x90\x91R\x80a\x032\x84\x7FQN\xA4\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\x84`\xA0a\x08\x87V[P\x92\x91PPV[`\0\x80\x80\x80a\x03h\x85\x7F8P\xC7\xBD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x08\xA8V[\x90\x96\x90\x95P\x93PPPPV[`\0\x81`\xFF\x81\x90\x1D\x80\x82\x01\x18b\r\x89\xE8\x81\x11\x15a\x03\xA3Wc\x08\xC3y\xA0`\0R` \x80Ra\x01T`AR`E`\x1C\xFD[p\x01\xFF\xFC\xB93\xBDo\xAD7\xAA-\x16-\x1AY@\x01`\x01\x82\x16\x02p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18`\x02\x82\x16\x15a\x03\xECWo\xFF\xF9rr7=A2Y\xA4i\x90X\x0E!:\x02`\x80\x1C[`\x04\x82\x16\x15a\x04\x0BWo\xFF\xF2\xE5\x0F_ei2\xEF\x125|\xF3\xC7\xFD\xCC\x02`\x80\x1C[`\x08\x82\x16\x15a\x04*Wo\xFF\xE5\xCA\xCA~\x10\xE4\xE6\x1C6$\xEA\xA0\x94\x1C\xD0\x02`\x80\x1C[`\x10\x82\x16\x15a\x04IWo\xFF\xCB\x98C\xD6\x0FaY\xC9\xDBX\x83\\\x92fD\x02`\x80\x1C[` \x82\x16\x15a\x04hWo\xFF\x97;A\xFA\x98\xC0\x81G.h\x96\xDF\xB2T\xC0\x02`\x80\x1C[`@\x82\x16\x15a\x04\x87Wo\xFF.\xA1df\xC9j8C\xECx\xB3&\xB5(a\x02`\x80\x1C[`\x80\x82\x16\x15a\x04\xA6Wo\xFE]\xEE\x04j\x99\xA2\xA8\x11\xC4a\xF1\x96\x9C0S\x02`\x80\x1C[a\x01\0\x82\x16\x15a\x04\xC6Wo\xFC\xBE\x86\xC7\x90\n\x88\xAE\xDC\xFF\xC8;G\x9A\xA3\xA4\x02`\x80\x1C[a\x02\0\x82\x16\x15a\x04\xE6Wo\xF9\x87\xA7%:\xC4\x13\x17o+\x07L\xF7\x81^T\x02`\x80\x1C[a\x04\0\x82\x16\x15a\x05\x06Wo\xF39+\x08\"\xB7\0\x05\x94\x0Cz9\x8EKp\xF3\x02`\x80\x1C[a\x08\0\x82\x16\x15a\x05&Wo\xE7\x15\x94u\xA2\xC2\x9BtC\xB2\x9C\x7F\xA6\xE8\x89\xD9\x02`\x80\x1C[a\x10\0\x82\x16\x15a\x05FWo\xD0\x97\xF3\xBD\xFD \"\xB8\x84Z\xD8\xF7\x92\xAAX%\x02`\x80\x1C[a \0\x82\x16\x15a\x05fWo\xA9\xF7FF-\x87\x0F\xDF\x8Ae\xDC\x1F\x90\xE0a\xE5\x02`\x80\x1C[a@\0\x82\x16\x15a\x05\x86Wop\xD8i\xA1V\xD2\xA1\xB8\x90\xBB=\xF6+\xAF2\xF7\x02`\x80\x1C[a\x80\0\x82\x16\x15a\x05\xA6Wo1\xBE\x13_\x97\xD0\x8F\xD9\x81#\x15\x05T/\xCF\xA6\x02`\x80\x1C[b\x01\0\0\x82\x16\x15a\x05\xC7Wo\t\xAAP\x8B[z\x84\xE1\xC6w\xDET\xF3\xE9\x9B\xC9\x02`\x80\x1C[b\x02\0\0\x82\x16\x15a\x05\xE7Wn]j\xF8\xDE\xDB\x81\x19f\x99\xC3)\"^\xE6\x04\x02`\x80\x1C[b\x04\0\0\x82\x16\x15a\x06\x06Wm\"\x16\xE5\x84\xF5\xFA\x1E\xA9&\x04\x1B\xED\xFE\x98\x02`\x80\x1C[b\x08\0\0\x82\x16\x15a\x06#Wk\x04\x8A\x17\x03\x91\xF7\xDCBDN\x8F\xA2\x02`\x80\x1C[`\0\x85\x13\x15a\x06OW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04[c\xFF\xFF\xFF\xFF\x01` \x1C\x94\x93PPPPV[\x82\x82\x10\x83\x83\x18\x02\x92\x83\x18\x92\x90\x91\x18\x90`\0\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x86\x16\x90\x87\x16\x11a\x06\xA4Wa\x06\x9D\x85\x85\x85a\x08\xD4V[\x91Pa\x07\x04V[\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11a\x06\xF6Wa\x06\xE2\x86\x85\x85a\x08\xD4V[\x91Pa\x06\xEF\x85\x87\x85a\tPV[\x90Pa\x07\x04V[a\x07\x01\x85\x85\x85a\tPV[\x90P[\x94P\x94\x92PPPV[`\0\x80\x80a\x071s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x87a\t\x86V[\x90P`\0a\x07Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x87a\t\x86V[\x90P\x86`\x02\x0B\x85`\x02\x0B\x12\x15a\x07\x84W\x80`@\x01Q\x82`@\x01Q\x03\x93P\x80``\x01Q\x82``\x01Q\x03\x92Pa\x08\x0BV[\x85`\x02\x0B\x85`\x02\x0B\x12a\x07\xB0W\x81`@\x01Q\x81`@\x01Q\x03\x93P\x81``\x01Q\x81``\x01Q\x03\x92Pa\x08\x0BV[\x80`@\x01Q\x82`@\x01Qa\x07\xD9\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\n\x04V[\x03\x03\x93P\x80``\x01Q\x82``\x01Qa\x08\x06\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\n6V[\x03\x03\x92P[PP\x94P\x94\x92PPPV[`\0\x80a\x08Io\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x85\x88\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\nbV[\x91Pa\x08{o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x84\x87\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\nbV[\x90P\x95P\x95\x93PPPPV[\x83`\0R\x82`\x04R\x80\x82`$`\0\x88Z\xFAa\x08\xA1W`\0\x80\xFD[PPPPPV[`\0\x80\x82`\0R`@`\0`\x04`\0\x87Z\xFAa\x08\xC3W`\0\x80\xFD[`\0Q\x91P` Q\x90P\x92P\x92\x90PV[`\0a\tF\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\tB```\xFF\x16\x85o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x87\x87\x03s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\nbV[\x04\x90V[\x90P[\x93\x92PPPV[`\0a\tF\x82o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85\x85\x03s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\noV[`@\x80Qa\x01\0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R`\x02\x82\x90\x0B\x81a\t\xFC\x85\x7F\xF3\r\xBA\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x84a\x01\0a\x08\x87V[PP\x92\x91PPV[`\0a\n0\x82\x7F\xF3\x05\x83\x99\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n\xD4V[\x92\x91PPV[`\0a\n0\x82\x7FF\x14\x13\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n\xD4V[`\0a\tF\x84\x84\x84a\n\xF8V[`\0\x82\x82\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x85\t\x81\x81\x10\x82\x01\x90\x03l\x01\0\0\0\0\0\0\0\0\0\0\0\0\x81\x10a\n\xC1Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x80`\xA0\x1B\x82``\x1C\x17\x92PPP\x92\x91PPV[`\0\x81`\0R` `\0`\x04`\0\x86Z\xFAa\n\xEEW`\0\x80\xFD[PP`\0Q\x91\x90PV[\x82\x82\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x85\t\x81\x81\x10\x82\x01\x90\x03\x80a\x0BGW\x82a\x0B>Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[P\x81\x90\x04a\tIV[\x80\x83\x11a\x0B\\Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x82\x84\x86\t`\0\x84\x81\x03\x85\x16\x94\x85\x90\x04\x94\x84\x83\x11\x90\x93\x03\x90\x83\x90\x03\x83\x90\x04`\x01\x01\x02\x92\x03\x04\x17`\x02`\x03\x83\x02\x81\x18\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x82\x03\x02\x80\x84\x02\x90\x91\x03\x02\x02\x93\x92PPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0B\xD8W`\0\x80\xFD[PV[\x805`\x02\x81\x90\x0B\x81\x14a\x0B\xEDW`\0\x80\xFD[\x91\x90PV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x0C\x08W`\0\x80\xFD[\x845a\x0C\x13\x81a\x0B\xB6V[\x93P` \x85\x015a\x0C#\x81a\x0B\xB6V[\x92Pa\x0C1`@\x86\x01a\x0B\xDBV[\x91Pa\x0C?``\x86\x01a\x0B\xDBV[\x90P\x92\x95\x91\x94P\x92PV[\x80\x82\x01\x80\x82\x11\x15a\n0W\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct V3PoolCallee(alloy::sol_types::private::Address);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<V3PoolCallee>
        for alloy::sol_types::private::Address {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<
                '_,
            > {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Address,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        self,
                    )
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::abi_encode_packed_to(
                    self,
                    out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::abi_encoded_size(
                    self,
                )
            }
        }
        #[automatically_derived]
        impl V3PoolCallee {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::Address) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::Address {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for V3PoolCallee {
            type RustType = alloy::sol_types::private::Address;
            type Token<'a> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<
                'a,
            >;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::type_check(
                    token,
                )
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::detokenize(
                    token,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for V3PoolCallee {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                    rust,
                )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    out,
                )
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    rust,
                )
            }
        }
    };
    /**Function with signature `getFeesOwed(address,address,int24,int24)` and selector `0xc6a63665`.
```solidity
function getFeesOwed(V3PoolCallee pool, address owner, int24 tickLower, int24 tickUpper) external view returns (uint128 tokensOwed0, uint128 tokensOwed1);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getFeesOwedCall {
        #[allow(missing_docs)]
        pub pool: <V3PoolCallee as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tickLower: alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub tickUpper: alloy::sol_types::private::primitives::aliases::I24,
    }
    ///Container type for the return parameters of the [`getFeesOwed(address,address,int24,int24)`](getFeesOwedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getFeesOwedReturn {
        #[allow(missing_docs)]
        pub tokensOwed0: u128,
        #[allow(missing_docs)]
        pub tokensOwed1: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                V3PoolCallee,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <V3PoolCallee as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::I24,
                alloy::sol_types::private::primitives::aliases::I24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getFeesOwedCall> for UnderlyingRustTuple<'_> {
                fn from(value: getFeesOwedCall) -> Self {
                    (value.pool, value.owner, value.tickLower, value.tickUpper)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getFeesOwedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        pool: tuple.0,
                        owner: tuple.1,
                        tickLower: tuple.2,
                        tickUpper: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u128, u128);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getFeesOwedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getFeesOwedReturn) -> Self {
                    (value.tokensOwed0, value.tokensOwed1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getFeesOwedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tokensOwed0: tuple.0,
                        tokensOwed1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getFeesOwedCall {
            type Parameters<'a> = (
                V3PoolCallee,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getFeesOwedReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getFeesOwed(address,address,int24,int24)";
            const SELECTOR: [u8; 4] = [198u8, 166u8, 54u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <V3PoolCallee as alloy_sol_types::SolType>::tokenize(&self.pool),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickLower),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickUpper),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getTotalAmounts(address,address,int24,int24)` and selector `0x95ba51bd`.
```solidity
function getTotalAmounts(V3PoolCallee pool, address owner, int24 tickLower, int24 tickUpper) external view returns (uint256 amount0, uint256 amount1);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTotalAmountsCall {
        #[allow(missing_docs)]
        pub pool: <V3PoolCallee as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tickLower: alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub tickUpper: alloy::sol_types::private::primitives::aliases::I24,
    }
    ///Container type for the return parameters of the [`getTotalAmounts(address,address,int24,int24)`](getTotalAmountsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTotalAmountsReturn {
        #[allow(missing_docs)]
        pub amount0: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub amount1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                V3PoolCallee,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <V3PoolCallee as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::I24,
                alloy::sol_types::private::primitives::aliases::I24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTotalAmountsCall> for UnderlyingRustTuple<'_> {
                fn from(value: getTotalAmountsCall) -> Self {
                    (value.pool, value.owner, value.tickLower, value.tickUpper)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getTotalAmountsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        pool: tuple.0,
                        owner: tuple.1,
                        tickLower: tuple.2,
                        tickUpper: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTotalAmountsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getTotalAmountsReturn) -> Self {
                    (value.amount0, value.amount1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getTotalAmountsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amount0: tuple.0,
                        amount1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getTotalAmountsCall {
            type Parameters<'a> = (
                V3PoolCallee,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getTotalAmountsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getTotalAmounts(address,address,int24,int24)";
            const SELECTOR: [u8; 4] = [149u8, 186u8, 81u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <V3PoolCallee as alloy_sol_types::SolType>::tokenize(&self.pool),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickLower),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickUpper),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`PositionLens`](self) function calls.
    pub enum PositionLensCalls {
        #[allow(missing_docs)]
        getFeesOwed(getFeesOwedCall),
        #[allow(missing_docs)]
        getTotalAmounts(getTotalAmountsCall),
    }
    #[automatically_derived]
    impl PositionLensCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [149u8, 186u8, 81u8, 189u8],
            [198u8, 166u8, 54u8, 101u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for PositionLensCalls {
        const NAME: &'static str = "PositionLensCalls";
        const MIN_DATA_LENGTH: usize = 128usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getFeesOwed(_) => {
                    <getFeesOwedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getTotalAmounts(_) => {
                    <getTotalAmountsCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<PositionLensCalls>] = &[
                {
                    fn getTotalAmounts(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionLensCalls> {
                        <getTotalAmountsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionLensCalls::getTotalAmounts)
                    }
                    getTotalAmounts
                },
                {
                    fn getFeesOwed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionLensCalls> {
                        <getFeesOwedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionLensCalls::getFeesOwed)
                    }
                    getFeesOwed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getFeesOwed(inner) => {
                    <getFeesOwedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getTotalAmounts(inner) => {
                    <getTotalAmountsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getFeesOwed(inner) => {
                    <getFeesOwedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getTotalAmounts(inner) => {
                    <getTotalAmountsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`PositionLens`](self) contract instance.

See the [wrapper's documentation](`PositionLensInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> PositionLensInstance<T, P, N> {
        PositionLensInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<PositionLensInstance<T, P, N>>,
    > {
        PositionLensInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        PositionLensInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`PositionLens`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`PositionLens`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct PositionLensInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for PositionLensInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("PositionLensInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > PositionLensInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`PositionLens`](self) contract instance.

See the [wrapper's documentation](`PositionLensInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<PositionLensInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> PositionLensInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> PositionLensInstance<T, P, N> {
            PositionLensInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > PositionLensInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getFeesOwed`] function.
        pub fn getFeesOwed(
            &self,
            pool: <V3PoolCallee as alloy::sol_types::SolType>::RustType,
            owner: alloy::sol_types::private::Address,
            tickLower: alloy::sol_types::private::primitives::aliases::I24,
            tickUpper: alloy::sol_types::private::primitives::aliases::I24,
        ) -> alloy_contract::SolCallBuilder<T, &P, getFeesOwedCall, N> {
            self.call_builder(
                &getFeesOwedCall {
                    pool,
                    owner,
                    tickLower,
                    tickUpper,
                },
            )
        }
        ///Creates a new call builder for the [`getTotalAmounts`] function.
        pub fn getTotalAmounts(
            &self,
            pool: <V3PoolCallee as alloy::sol_types::SolType>::RustType,
            owner: alloy::sol_types::private::Address,
            tickLower: alloy::sol_types::private::primitives::aliases::I24,
            tickUpper: alloy::sol_types::private::primitives::aliases::I24,
        ) -> alloy_contract::SolCallBuilder<T, &P, getTotalAmountsCall, N> {
            self.call_builder(
                &getTotalAmountsCall {
                    pool,
                    owner,
                    tickLower,
                    tickUpper,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > PositionLensInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}

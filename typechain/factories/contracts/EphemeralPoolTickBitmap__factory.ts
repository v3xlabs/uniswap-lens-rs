/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EphemeralPoolTickBitmap,
  EphemeralPoolTickBitmapInterface,
} from "../../contracts/EphemeralPoolTickBitmap";

const _abi = [
  {
    inputs: [
      {
        internalType: "V3PoolCallee",
        name: "pool",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "V3PoolCallee",
        name: "pool",
        type: "address",
      },
    ],
    name: "getTickBitmap",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "slot",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "data",
            type: "uint256",
          },
        ],
        internalType: "struct PoolUtils.Slot[]",
        name: "slots",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040516102f33803806102f383398101604081905261002291610224565b600061002d8261005b565b90506000816040516020016100429190610254565b6040516020818303038152906040529050805160208201fd5b60606000826001600160a01b031663d0c93a7c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561009d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c191906102a3565b9050600080620d89e71983810782139084900503600290810b600890811d91620d89e886810785139087900503900b901d9092509050600661ffff600184840301166001600160401b0381111561011a5761011a6102c6565b60405190808252806020026020018201604052801561015f57816020015b60408051808201909152600080825260208201528152602001906001900390816101385790505b509450825b8260010b8160010b136101d257600081815260208381526040918290208251808401909352808352919081016101a36001600160a01b038b16856101dc565b8152508786840361ffff16815181106101be576101be6102dc565b602090810291909101015250600101610164565b5050505050919050565b6000600182900b6101f88463299ce14b60e11b83856020610203565b505060005192915050565b8360005282600452808260246000885afa61021d57600080fd5b5050505050565b60006020828403121561023657600080fd5b81516001600160a01b038116811461024d57600080fd5b9392505050565b602080825282518282018190526000918401906040840190835b8181101561029857835180518452602090810151818501529093019260409092019160010161026e565b509095945050505050565b6000602082840312156102b557600080fd5b81518060020b811461024d57600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe";

type EphemeralPoolTickBitmapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EphemeralPoolTickBitmapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EphemeralPoolTickBitmap__factory extends ContractFactory {
  constructor(...args: EphemeralPoolTickBitmapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    pool: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<EphemeralPoolTickBitmap> {
    return super.deploy(
      pool,
      overrides || {}
    ) as Promise<EphemeralPoolTickBitmap>;
  }
  override getDeployTransaction(
    pool: string,
    overrides?: PayableOverrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(pool, overrides || {});
  }
  override attach(address: string): EphemeralPoolTickBitmap {
    return super.attach(address) as EphemeralPoolTickBitmap;
  }
  override connect(signer: Signer): EphemeralPoolTickBitmap__factory {
    return super.connect(signer) as EphemeralPoolTickBitmap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EphemeralPoolTickBitmapInterface {
    return new utils.Interface(_abi) as EphemeralPoolTickBitmapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EphemeralPoolTickBitmap {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as EphemeralPoolTickBitmap;
  }
}
